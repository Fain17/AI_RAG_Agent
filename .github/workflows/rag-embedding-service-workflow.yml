name: RAG Embedding Service CI/CD

on:
  push:
    branches: [ develop ]
    paths:
      - 'rag-embedding-service/**'
      - '.github/workflows/rag-embedding-service-workflow.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'rag-embedding-service/**'
      - '.github/workflows/rag-embedding-service-workflow.yml'

# No global defaults - specify working-directory explicitly where needed

jobs:
  lint:
    name: Code Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-linting-${{ hashFiles('rag-embedding-service/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-linting-

      - name: Install linting dependencies
        working-directory: rag-embedding-service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run Black (Code Formatting)
        working-directory: rag-embedding-service
        run: black --check --diff app/

      - name: Run isort (Import Sorting)
        working-directory: rag-embedding-service
        run: isort --check-only --diff app/

      - name: Run Flake8 (Style Guide)
        working-directory: rag-embedding-service
        run: flake8 app/

      - name: Run MyPy (Type Checking)
        working-directory: rag-embedding-service
        run: mypy app/ --ignore-missing-imports

      - name: Run Bandit (Security Linting)
        working-directory: rag-embedding-service
        run: bandit -r app/ -f json -o bandit-report.json || true

      - name: Upload Bandit Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-security-report
          path: rag-embedding-service/bandit-report.json

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('rag-embedding-service/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        working-directory: rag-embedding-service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run Unit Tests
        working-directory: rag-embedding-service
        run: pytest tests/ -v --tb=short -m "not slow and not integration" --cov=app --cov-report=xml --cov-report=html

      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: |
            rag-embedding-service/coverage.xml
            rag-embedding-service/htmlcov/

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: rag-embedding-service/coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install security scanning dependencies
        working-directory: rag-embedding-service
        run: |
          python -m pip install --upgrade pip
          pip install safety>=2.0.0

      - name: Run Safety (Dependency Security Check)
        working-directory: rag-embedding-service
        run: safety check --json --output safety-report.json || true

      - name: Upload Safety Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: safety-security-report
          path: rag-embedding-service/safety-report.json

  docker-build-and-test:
    name: Docker Build and Test
    runs-on: ubuntu-latest
    needs: [lint, test, security-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./rag-embedding-service
          load: true
          tags: |
            rag-embedding-service:${{ github.sha }}
            rag-embedding-service:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker container
        run: |
          # Start container in background
          docker run -d -p 8001:8001 --name test-container rag-embedding-service:latest
          
          # Wait for container to be ready
          sleep 30
          
          # Test the API endpoint
          curl -f -X POST "http://localhost:8001/embed" \
               -H "Content-Type: application/json" \
               -d '{"text": "Hello world"}' || exit 1
          
          # Stop container
          docker stop test-container
          docker rm test-container

  docker-push:
    name: Push Docker Image
    runs-on: ubuntu-latest
    needs: [docker-build-and-test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/rag-embedding-service
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./rag-embedding-service
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  docker-security-scan:
    name: Docker Security Scan with Trivy
    runs-on: ubuntu-latest
    needs: docker-push
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t rag-embedding-service:${{ github.sha }} ./rag-embedding-service
          docker tag rag-embedding-service:${{ github.sha }} rag-embedding-service:latest

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: 'rag-embedding-service:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy vulnerability scanner (JSON format)
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: 'rag-embedding-service:latest'
          format: 'json'
          output: 'trivy-results.json'

      - name: Upload Trivy JSON Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-security-report
          path: trivy-results.json

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [docker-push, docker-security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
      packages: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for changelog generation

      - name: Generate version
        id: version
        run: |
          # Generate version based on date and commit
          VERSION="v$(date +%Y.%m.%d)-$(git rev-parse --short HEAD)"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=embedding-service-$VERSION" >> $GITHUB_OUTPUT

      - name: Create Git tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.version.outputs.tag }}
          git push origin ${{ steps.version.outputs.tag }}

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from recent commits for embedding service
          CHANGELOG=$(git log --oneline --since="7 days ago" --no-merges --pretty=format:"- %s" -- rag-embedding-service/ | head -20)
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="- Minor updates and bug fixes"
          fi
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.version.outputs.tag }}
          name: RAG Embedding Service Release ${{ steps.version.outputs.version }}
          body: |
            ## Changes in this release
            ${{ steps.changelog.outputs.changelog }}
            
            ## Docker Image
            This release includes a Docker image available at:
            `ghcr.io/${{ github.repository_owner }}/rag-embedding-service:${{ steps.version.outputs.tag }}`
            
            ## Security Scan
            All security scans have passed for this release.
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [lint, test, security-scan, docker-build-and-test, docker-security-scan, docker-push, release]
    if: always()
    steps:
      - name: Notify on Success
        if: ${{ needs.lint.result == 'success' && needs.test.result == 'success' && needs.security-scan.result == 'success' && needs.docker-build-and-test.result == 'success' }}
        run: |
          echo "✅ All critical checks passed for RAG Embedding Service!"
          echo "- Linting: ${{ needs.lint.result }}"
          echo "- Tests: ${{ needs.test.result }}"
          echo "- Security Scan: ${{ needs.security-scan.result }}"
          echo "- Docker Build & Test: ${{ needs.docker-build-and-test.result }}"
          echo "- Docker Security Scan: ${{ needs.docker-security-scan.result }} (non-blocking)"
          echo "- Docker Push: ${{ needs.docker-push.result }} (conditional)"
          echo "- Release: ${{ needs.release.result }} (conditional)"

      - name: Notify on Failure
        if: ${{ needs.lint.result == 'failure' || needs.test.result == 'failure' || needs.security-scan.result == 'failure' || needs.docker-build-and-test.result == 'failure' }}
        run: |
          echo "❌ Some critical checks failed for RAG Embedding Service!"
          echo "- Linting: ${{ needs.lint.result }}"
          echo "- Tests: ${{ needs.test.result }}"
          echo "- Security Scan: ${{ needs.security-scan.result }}"
          echo "- Docker Build & Test: ${{ needs.docker-build-and-test.result }}"
          echo "- Docker Security Scan: ${{ needs.docker-security-scan.result }} (non-blocking)"
          echo "- Docker Push: ${{ needs.docker-push.result }} (conditional)"
          echo "- Release: ${{ needs.release.result }} (conditional)"
          exit 1 